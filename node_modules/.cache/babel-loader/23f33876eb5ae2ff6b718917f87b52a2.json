{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport expect from 'expect'; // ReactDOM.render(<App />, document.getElementById('root'));\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nimport { createStore } from 'redux';\n\nfunction counter() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1;\n\n    case 'DECREMENT':\n      return state - 1;\n\n    default:\n      return state;\n  }\n} // expect(\n//     counter(0, {type: 'INCREMENT'})\n// ).toEqual(1);\n// expect(\n//     counter(1, {type: 'INCREMENT'})\n// ).toEqual(2);\n// expect(\n//     counter(2, {type: 'DECREMENT'})\n// ).toEqual(1);\n// expect(\n//     counter(1, {type: 'DECREMENT'})\n// ).toEqual(0);\n// expect(\n//     counter(1, {type: 'SOMETHING_ELSE'})\n// ).toEqual(1);\n// console.log('Tests passed!');\n\n\nvar store = createStore(counter);\n\nvar render = function render() {\n  document.body.innerText = store.getState();\n};\n\nstore.subscribe(render);\nrender();\ndocument.addEventListener('click', function () {\n  store.dispatch({\n    type: 'INCREMENT'\n  });\n});","map":{"version":3,"sources":["/Users/sawamurap/redux-tutorial/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","expect","createStore","counter","state","action","type","store","render","document","body","innerText","getState","subscribe","addEventListener","dispatch"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CAEA;AAEA;AACA;AACA;AACA;;AAEA,SAASC,WAAT,QAA4B,OAA5B;;AAEA,SAASC,OAAT,GAAoC;AAAA,MAAnBC,KAAmB,uEAAX,CAAW;AAAA,MAARC,MAAQ;;AAChC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,WAAL;AACI,aAAOF,KAAK,GAAG,CAAf;;AACJ,SAAK,WAAL;AACI,aAAOA,KAAK,GAAG,CAAf;;AACJ;AACI,aAAOA,KAAP;AANR;AAQH,C,CAED;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;AAGA,IAAMG,KAAK,GAAGL,WAAW,CAACC,OAAD,CAAzB;;AAEA,IAAMK,MAAM,GAAG,SAATA,MAAS,GAAM;AACjBC,EAAAA,QAAQ,CAACC,IAAT,CAAcC,SAAd,GAA0BJ,KAAK,CAACK,QAAN,EAA1B;AACH,CAFD;;AAIAL,KAAK,CAACM,SAAN,CAAgBL,MAAhB;AACAA,MAAM;AAENC,QAAQ,CAACK,gBAAT,CAA0B,OAA1B,EAAmC,YAAM;AACrCP,EAAAA,KAAK,CAACQ,QAAN,CAAe;AAAET,IAAAA,IAAI,EAAE;AAAR,GAAf;AACH,CAFD","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport expect from 'expect';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nimport { createStore } from 'redux';\n\nfunction counter(state = 0, action) {\n    switch (action.type){\n        case 'INCREMENT':\n            return state + 1;\n        case 'DECREMENT':\n            return state - 1;\n        default:\n            return state;\n    }\n}\n\n// expect(\n//     counter(0, {type: 'INCREMENT'})\n// ).toEqual(1);\n\n// expect(\n//     counter(1, {type: 'INCREMENT'})\n// ).toEqual(2);\n\n// expect(\n//     counter(2, {type: 'DECREMENT'})\n// ).toEqual(1);\n\n// expect(\n//     counter(1, {type: 'DECREMENT'})\n// ).toEqual(0);\n\n// expect(\n//     counter(1, {type: 'SOMETHING_ELSE'})\n// ).toEqual(1);\n\n// console.log('Tests passed!');\n\n\nconst store = createStore(counter);\n\nconst render = () => {\n    document.body.innerText = store.getState();\n};\n\nstore.subscribe(render);\nrender();\n\ndocument.addEventListener('click', () => {\n    store.dispatch({ type: 'INCREMENT' });\n});"]},"metadata":{},"sourceType":"module"}