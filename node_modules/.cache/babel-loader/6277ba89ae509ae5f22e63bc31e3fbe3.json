{"ast":null,"code":"var _jsxFileName = \"/Users/sawamurap/redux-tutorial/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport expect from 'expect'; // ReactDOM.render(<App />, document.getElementById('root'));\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nimport { createStore } from 'redux'; /// createStore from scratch        \n// const createStore = (reducer) => {\n//     let state;\n//     let listeners = [];\n//     const getState = () => state;\n//     const dispatch = (action) => {\n//         state = reducer(state, action);\n//         listeners.forEach(listener => listener());\n//     };\n//     const subscribe = (listener) => {\n//         listeners.push(listener)\n//         return () => {\n//             listeners = listeners.filter(l => l !== listener);\n//         };\n//     };\n//     dispatch({});\n//     return {getState, dispatch, subscribe};\n// };\n\nfunction counter() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1;\n\n    case 'DECREMENT':\n      return state - 1;\n\n    default:\n      return state;\n  }\n} /// Testing \n// expect(\n//     counter(0, {type: 'INCREMENT'})\n// ).toEqual(1);\n// expect(\n//     counter(1, {type: 'INCREMENT'})\n// ).toEqual(2);\n// expect(\n//     counter(2, {type: 'DECREMENT'})\n// ).toEqual(1);\n// expect(\n//     counter(1, {type: 'DECREMENT'})\n// ).toEqual(0);\n// expect(\n//     counter(1, {type: 'SOMETHING_ELSE'})\n// ).toEqual(1);\n// console.log('Tests passed!');\n\n\nvar store = createStore(counter);\n\nvar Counter = function Counter(_ref) {\n  var value = _ref.value,\n      onIncrement = _ref.onIncrement,\n      onDecrement = _ref.onDecrement;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, value), React.createElement(\"button\", {\n    onClick: onIncrement,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"+\"), React.createElement(\"button\", {\n    onClick: onDecrement,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"-\"));\n};\n\nvar addCounter = function addCounter(list) {\n  list.push(0);\n  return list;\n};\n\nvar testAddCounter = function testAddCounter() {\n  var listBefore = [];\n  var listAfter = [0];\n  expect(addCounter(listBefore).toEqual(listAfter));\n};\n\ntestAddCounter();\nconsole.log('All tests passed');\n\nvar render = function render() {\n  ReactDOM.render(React.createElement(Counter, {\n    value: store.getState(),\n    onIncrement: function onIncrement() {\n      return store.dispatch({\n        type: 'INCREMENT'\n      });\n    },\n    onDecrement: function onDecrement() {\n      return store.dispatch({\n        type: 'DECREMENT'\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }), document.getElementById('root'));\n};\n\nstore.subscribe(render);\nrender();","map":{"version":3,"sources":["/Users/sawamurap/redux-tutorial/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","expect","createStore","counter","state","action","type","store","Counter","value","onIncrement","onDecrement","addCounter","list","push","testAddCounter","listBefore","listAfter","toEqual","console","log","render","getState","dispatch","document","getElementById","subscribe"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CAEA;AAEA;AACA;AACA;AACA;;AAEA,SAASC,WAAT,QAA4B,OAA5B,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;;AAKA,SAASC,OAAT,GAAoC;AAAA,MAAnBC,KAAmB,uEAAX,CAAW;AAAA,MAARC,MAAQ;;AAChC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,WAAL;AACI,aAAOF,KAAK,GAAG,CAAf;;AACJ,SAAK,WAAL;AACI,aAAOA,KAAK,GAAG,CAAf;;AACJ;AACI,aAAOA,KAAP;AANR;AAQH,C,CAED;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;AAGA,IAAMG,KAAK,GAAGL,WAAW,CAACC,OAAD,CAAzB;;AAEA,IAAMK,OAAO,GAAG,SAAVA,OAAU;AAAA,MACZC,KADY,QACZA,KADY;AAAA,MAEZC,WAFY,QAEZA,WAFY;AAAA,MAGZC,WAHY,QAGZA,WAHY;AAAA,SAKZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKF,KAAL,CADJ,EAEI;AAAQ,IAAA,OAAO,EAAEC,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFJ,EAGI;AAAQ,IAAA,OAAO,EAAEC,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHJ,CALY;AAAA,CAAhB;;AAYA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAU;AACzBA,EAAAA,IAAI,CAACC,IAAL,CAAU,CAAV;AACA,SAAOD,IAAP;AACH,CAHD;;AAKA,IAAME,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACzB,MAAMC,UAAU,GAAG,EAAnB;AACA,MAAMC,SAAS,GAAG,CAAC,CAAD,CAAlB;AAEAhB,EAAAA,MAAM,CAACW,UAAU,CAACI,UAAD,CAAV,CAAuBE,OAAvB,CAA+BD,SAA/B,CAAD,CAAN;AACH,CALD;;AAOAF,cAAc;AACdI,OAAO,CAACC,GAAR,CAAY,kBAAZ;;AAGA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AACjBvB,EAAAA,QAAQ,CAACuB,MAAT,CACI,oBAAC,OAAD;AACI,IAAA,KAAK,EAAEd,KAAK,CAACe,QAAN,EADX;AAEI,IAAA,WAAW,EAAE;AAAA,aAAMf,KAAK,CAACgB,QAAN,CAAe;AAAEjB,QAAAA,IAAI,EAAE;AAAR,OAAf,CAAN;AAAA,KAFjB;AAGI,IAAA,WAAW,EAAE;AAAA,aAAMC,KAAK,CAACgB,QAAN,CAAe;AAAEjB,QAAAA,IAAI,EAAE;AAAR,OAAf,CAAN;AAAA,KAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAMIkB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANJ;AAQH,CATD;;AAWAlB,KAAK,CAACmB,SAAN,CAAgBL,MAAhB;AACAA,MAAM","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport expect from 'expect';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nimport { createStore } from 'redux';\n\n/// createStore from scratch        \n// const createStore = (reducer) => {\n//     let state;\n//     let listeners = [];\n\n//     const getState = () => state;\n//     const dispatch = (action) => {\n//         state = reducer(state, action);\n//         listeners.forEach(listener => listener());\n//     };\n//     const subscribe = (listener) => {\n//         listeners.push(listener)\n//         return () => {\n//             listeners = listeners.filter(l => l !== listener);\n//         };\n//     };\n\n//     dispatch({});\n\n//     return {getState, dispatch, subscribe};\n// };\n\n\n\n\nfunction counter(state = 0, action) {\n    switch (action.type){\n        case 'INCREMENT':\n            return state + 1;\n        case 'DECREMENT':\n            return state - 1;\n        default:\n            return state;\n    }\n}\n\n/// Testing \n// expect(\n//     counter(0, {type: 'INCREMENT'})\n// ).toEqual(1);\n\n// expect(\n//     counter(1, {type: 'INCREMENT'})\n// ).toEqual(2);\n\n// expect(\n//     counter(2, {type: 'DECREMENT'})\n// ).toEqual(1);\n\n// expect(\n//     counter(1, {type: 'DECREMENT'})\n// ).toEqual(0);\n\n// expect(\n//     counter(1, {type: 'SOMETHING_ELSE'})\n// ).toEqual(1);\n\n// console.log('Tests passed!');\n\n\nconst store = createStore(counter);\n\nconst Counter = ({ \n    value,\n    onIncrement,\n    onDecrement\n}) => (\n    <div>\n        <h1>{value}</h1>\n        <button onClick={onIncrement}>+</button>\n        <button onClick={onDecrement}>-</button>\n    </div>\n);\n\nconst addCounter = (list) => {\n    list.push(0);\n    return list;\n}\n\nconst testAddCounter = () => {\n    const listBefore = [];\n    const listAfter = [0];\n    \n    expect(addCounter(listBefore).toEqual(listAfter));\n}\n\ntestAddCounter();\nconsole.log('All tests passed')\n\n\nconst render = () => {\n    ReactDOM.render(\n        <Counter \n            value={store.getState()} \n            onIncrement={() => store.dispatch({ type: 'INCREMENT' })}\n            onDecrement={() => store.dispatch({ type: 'DECREMENT' })}\n        />,\n        document.getElementById('root')\n    );\n};\n\nstore.subscribe(render);\nrender();\n"]},"metadata":{},"sourceType":"module"}