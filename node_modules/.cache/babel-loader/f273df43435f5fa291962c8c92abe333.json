{"ast":null,"code":"import _objectSpread from \"/Users/sawamurap/redux-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/sawamurap/redux-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport expect from 'expect';\nimport deepFreeze from 'deep-freeze'; // ReactDOM.render(<App />, document.getElementById('root'));\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nimport { createStore } from 'redux'; /// createStore from scratch        \n// const createStore = (reducer) => {\n//     let state;\n//     let listeners = [];\n//     const getState = () => state;\n//     const dispatch = (action) => {\n//         state = reducer(state, action);\n//         listeners.forEach(listener => listener());\n//     };\n//     const subscribe = (listener) => {\n//         listeners.push(listener)\n//         return () => {\n//             listeners = listeners.filter(l => l !== listener);\n//         };\n//     };\n//     dispatch({});\n//     return {getState, dispatch, subscribe};\n// };\n// function counter(state = 0, action) {\n//     switch (action.type){\n//         case 'INCREMENT':\n//             return state + 1;\n//         case 'DECREMENT':\n//             return state - 1;\n//         default:\n//             return state;\n//     }\n// }\n// /// Testing \n// // expect(\n// //     counter(0, {type: 'INCREMENT'})\n// // ).toEqual(1);\n// // expect(\n// //     counter(1, {type: 'INCREMENT'})\n// // ).toEqual(2);\n// // expect(\n// //     counter(2, {type: 'DECREMENT'})\n// // ).toEqual(1);\n// // expect(\n// //     counter(1, {type: 'DECREMENT'})\n// // ).toEqual(0);\n// // expect(\n// //     counter(1, {type: 'SOMETHING_ELSE'})\n// // ).toEqual(1);\n// // console.log('Tests passed!');\n// const store = createStore(counter);\n// const Counter = ({ \n//     value,\n//     onIncrement,\n//     onDecrement\n// }) => (\n//     <div>\n//         <h1>{value}</h1>\n//         <button onClick={onIncrement}>+</button>\n//         <button onClick={onDecrement}>-</button>\n//     </div>\n// );\n// const addCounter = (list) => {\n//     return [...list, 0];\n// }\n// const removeCounter = (list, index) => {\n//     return [...list.slice(0, index),\n//         ...list.slice(index + 1)\n//     ];\n// };\n// const testAddCounter = () => {\n//     const listBefore = [];\n//     const listAfter = [0];\n//     deepFreeze(listBefore);\n//     expect(addCounter(listBefore)).toEqual(listAfter);\n// }\n// const testRemoveCounter = () => {\n//     const listBefore = [0, 10, 20];\n//     const listAfter = [0, 20];\n//     deepFreeze(listBefore);\n//     expect(removeCounter(listBefore,1)).toEqual(listAfter);\n// }\n// const incrementCounter = (list, index) => {\n//     return [\n//         ...list.slice(0,index),\n//         list[index]+1,\n//         ...list.slice(index+1)\n//     ]\n// };\n// const testIncrementCounter = () => {\n//     const listBefore = [0, 10, 20];\n//     const listAfter = [0, 11, 20];\n//     deepFreeze(listBefore)\n//     expect(incrementCounter(listBefore,1).toEqual(listAfter));\n// }\n// testAddCounter();\n// testRemoveCounter();\n// console.log('All tests passed')\n// ############  TESTS ################# //\n\nvar testAddToDo = function testAddToDo() {\n  var stateBefore = [];\n  var stateAfter = [{\n    id: 0,\n    text: 'Learn Redux',\n    completed: false\n  }];\n  var action = {\n    type: 'ADD_TODO',\n    id: 0,\n    text: 'Learn Redux'\n  };\n  deepFreeze(stateBefore);\n  deepFreeze(action);\n  expect(todos(stateBefore, action)).toEqual(stateAfter);\n};\n\nvar testToggleTodo = function testToggleTodo() {\n  var stateBefore = [{\n    id: 0,\n    text: 'Blah',\n    completed: false\n  }];\n  var stateAfter = [{\n    id: 0,\n    text: 'Blah',\n    completed: true\n  }];\n  var action = {\n    type: 'TOGGLE_TODO',\n    id: 0\n  };\n  deepFreeze(stateBefore);\n  deepFreeze(action);\n  expect(todos(stateBefore, action)).toEqual(stateAfter);\n}; // ############ TO DO LIST ################## //\n\n\nvar todo = function todo() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'ADD_TODO':\n      return _toConsumableArray(state).concat([{\n        id: action.id,\n        text: action.text,\n        completed: false\n      }]);\n\n    case 'TOGGLE_TODO':\n      if (state.id !== action.id) {\n        return state;\n      }\n\n      return _objectSpread({}, state, {\n        completed: !action.completed\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar todos = function todos() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'ADD_TODO':\n      return _toConsumableArray(state).concat([todo(undefined, action)]);\n\n    case 'TOGGLE_TODO':\n      return state.map(function (todo) {});\n\n    default:\n      return state;\n  }\n};\n\ntestAddToDo();\ntestToggleTodo();\nconsole.log('ALL TESTS PASSED'); // const store = createStore(TodoApp);\n// class TodoApp extends Component {\n//     render() {\n//         return (\n//             <div>\n//                 <button onClick={() => {\n//                     store.dispatch({\n//                     })\n//                 }}\n//                 />\n//             </div>\n//         );\n//     }\n// }\n// const render = () => {\n//     ReactDOM.render(\n//         // <Counter \n//         //     value={store.getState()} \n//         //     onIncrement={() => store.dispatch({ type: 'INCREMENT' })}\n//         //     onDecrement={() => store.dispatch({ type: 'DECREMENT' })}\n//         // />,\n//         document.getElementById('root')\n//     );\n// };\n// store.subscribe(render);\n// render();","map":{"version":3,"sources":["/Users/sawamurap/redux-tutorial/src/index.js"],"names":["React","Component","ReactDOM","App","serviceWorker","expect","deepFreeze","createStore","testAddToDo","stateBefore","stateAfter","id","text","completed","action","type","todos","toEqual","testToggleTodo","todo","state","undefined","map","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport expect from 'expect';\nimport deepFreeze from 'deep-freeze';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nimport { createStore } from 'redux';\n\n/// createStore from scratch        \n// const createStore = (reducer) => {\n//     let state;\n//     let listeners = [];\n\n//     const getState = () => state;\n//     const dispatch = (action) => {\n//         state = reducer(state, action);\n//         listeners.forEach(listener => listener());\n//     };\n//     const subscribe = (listener) => {\n//         listeners.push(listener)\n//         return () => {\n//             listeners = listeners.filter(l => l !== listener);\n//         };\n//     };\n\n//     dispatch({});\n\n//     return {getState, dispatch, subscribe};\n// };\n\n// function counter(state = 0, action) {\n//     switch (action.type){\n//         case 'INCREMENT':\n//             return state + 1;\n//         case 'DECREMENT':\n//             return state - 1;\n//         default:\n//             return state;\n//     }\n// }\n\n// /// Testing \n// // expect(\n// //     counter(0, {type: 'INCREMENT'})\n// // ).toEqual(1);\n\n// // expect(\n// //     counter(1, {type: 'INCREMENT'})\n// // ).toEqual(2);\n\n// // expect(\n// //     counter(2, {type: 'DECREMENT'})\n// // ).toEqual(1);\n\n// // expect(\n// //     counter(1, {type: 'DECREMENT'})\n// // ).toEqual(0);\n\n// // expect(\n// //     counter(1, {type: 'SOMETHING_ELSE'})\n// // ).toEqual(1);\n\n// // console.log('Tests passed!');\n\n\n// const store = createStore(counter);\n\n// const Counter = ({ \n//     value,\n//     onIncrement,\n//     onDecrement\n// }) => (\n//     <div>\n//         <h1>{value}</h1>\n//         <button onClick={onIncrement}>+</button>\n//         <button onClick={onDecrement}>-</button>\n//     </div>\n// );\n\n// const addCounter = (list) => {\n//     return [...list, 0];\n// }\n\n// const removeCounter = (list, index) => {\n//     return [...list.slice(0, index),\n//         ...list.slice(index + 1)\n//     ];\n// };\n\n\n// const testAddCounter = () => {\n//     const listBefore = [];\n//     const listAfter = [0];\n//     deepFreeze(listBefore);\n//     expect(addCounter(listBefore)).toEqual(listAfter);\n// }\n\n// const testRemoveCounter = () => {\n//     const listBefore = [0, 10, 20];\n//     const listAfter = [0, 20];\n//     deepFreeze(listBefore);\n//     expect(removeCounter(listBefore,1)).toEqual(listAfter);\n// }\n\n// const incrementCounter = (list, index) => {\n//     return [\n//         ...list.slice(0,index),\n//         list[index]+1,\n//         ...list.slice(index+1)\n//     ]\n// };\n\n// const testIncrementCounter = () => {\n//     const listBefore = [0, 10, 20];\n//     const listAfter = [0, 11, 20];\n//     deepFreeze(listBefore)\n//     expect(incrementCounter(listBefore,1).toEqual(listAfter));\n// }\n\n// testAddCounter();\n// testRemoveCounter();\n// console.log('All tests passed')\n\n// ############  TESTS ################# //\n\nconst testAddToDo = () => {\n    const stateBefore = [];\n    const stateAfter = [\n        {\n            id: 0,\n            text: 'Learn Redux',\n            completed: false\n        }\n    ];\n    const action = {\n        type: 'ADD_TODO',\n        id: 0,\n        text: 'Learn Redux'\n    };\n\n    deepFreeze(stateBefore);\n    deepFreeze(action);\n\n    expect(\n        todos(stateBefore, action)\n    ).toEqual(stateAfter);\n};\n\nconst testToggleTodo = () => {\n    const stateBefore = [\n        {\n            id: 0,\n            text: 'Blah',\n            completed: false\n        }\n    ];\n\n    const stateAfter = [\n        {\n            id: 0,\n            text: 'Blah',\n            completed: true\n        }\n    ];\n\n    const action = {\n        type: 'TOGGLE_TODO',\n        id: 0\n    };\n\n    deepFreeze(stateBefore);\n    deepFreeze(action);\n\n    expect(\n        todos(stateBefore, action)\n    ).toEqual(stateAfter);\n};\n\n// ############ TO DO LIST ################## //\n\nconst todo = (state = [], action) => {\n    switch (action.type) {  \n        case 'ADD_TODO':\n            return [\n                ...state, \n                {\n                    id: action.id,\n                    text: action.text,\n                    completed: false\n                }\n            ];\n        case 'TOGGLE_TODO':\n            if (state.id !== action.id) {\n                return state;\n            }\n            return {\n                ...state,\n                completed: !action.completed\n            }\n        default:\n            return state;\n    }\n}\n\nconst todos = (state = [], action) => {\n    switch (action.type) {  \n        case 'ADD_TODO':\n            return [\n                ...state, \n                todo(undefined, action)\n            ];\n        case 'TOGGLE_TODO':\n            return state.map(todo => {\n                \n            });\n        default:\n            return state;\n    }\n};\n\ntestAddToDo();  \ntestToggleTodo();\nconsole.log('ALL TESTS PASSED')\n\n// const store = createStore(TodoApp);\n\n// class TodoApp extends Component {\n//     render() {\n//         return (\n//             <div>\n//                 <button onClick={() => {\n//                     store.dispatch({\n\n//                     })\n//                 }}\n//                 />\n//             </div>\n//         );\n//     }\n// }\n\n// const render = () => {\n//     ReactDOM.render(\n//         // <Counter \n//         //     value={store.getState()} \n//         //     onIncrement={() => store.dispatch({ type: 'INCREMENT' })}\n//         //     onDecrement={() => store.dispatch({ type: 'DECREMENT' })}\n//         // />,\n//         document.getElementById('root')\n//     );\n// };\n\n// store.subscribe(render);\n// render();\n"]},"metadata":{},"sourceType":"module"}