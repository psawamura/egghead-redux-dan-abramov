{"ast":null,"code":"import _classCallCheck from \"/Users/sawamurap/redux-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sawamurap/redux-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sawamurap/redux-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sawamurap/redux-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sawamurap/redux-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _toConsumableArray from \"/Users/sawamurap/redux-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/sawamurap/redux-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/sawamurap/redux-tutorial/src/index.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport expect from 'expect';\nimport deepFreeze from 'deep-freeze'; // ReactDOM.render(<App />, document.getElementById('root'));\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nimport { createStore, combineReducers } from 'redux'; /// createStore from scratch        \n// const createStore = (reducer) => {\n//     let state;\n//     let listeners = [];\n//     const getState = () => state;\n//     const dispatch = (action) => {\n//         state = reducer(state, action);\n//         listeners.forEach(listener => listener());\n//     };\n//     const subscribe = (listener) => {\n//         listeners.push(listener)\n//         return () => {\n//             listeners = listeners.filter(l => l !== listener);\n//         };\n//     };\n//     dispatch({});\n//     return {getState, dispatch, subscribe};\n// };\n// function counter(state = 0, action) {\n//     switch (action.type){\n//         case 'INCREMENT':\n//             return state + 1;\n//         case 'DECREMENT':\n//             return state - 1;\n//         default:\n//             return state;\n//     }\n// }\n// /// Testing \n// // expect(\n// //     counter(0, {type: 'INCREMENT'})\n// // ).toEqual(1);\n// // expect(\n// //     counter(1, {type: 'INCREMENT'})\n// // ).toEqual(2);\n// // expect(\n// //     counter(2, {type: 'DECREMENT'})\n// // ).toEqual(1);\n// // expect(\n// //     counter(1, {type: 'DECREMENT'})\n// // ).toEqual(0);\n// // expect(\n// //     counter(1, {type: 'SOMETHING_ELSE'})\n// // ).toEqual(1);\n// // console.log('Tests passed!');\n// const store = createStore(counter);\n// const Counter = ({ \n//     value,\n//     onIncrement,\n//     onDecrement\n// }) => (\n//     <div>\n//         <h1>{value}</h1>\n//         <button onClick={onIncrement}>+</button>\n//         <button onClick={onDecrement}>-</button>\n//     </div>\n// );\n// const addCounter = (list) => {\n//     return [...list, 0];\n// }\n// const removeCounter = (list, index) => {\n//     return [...list.slice(0, index),\n//         ...list.slice(index + 1)\n//     ];\n// };\n// const testAddCounter = () => {\n//     const listBefore = [];\n//     const listAfter = [0];\n//     deepFreeze(listBefore);\n//     expect(addCounter(listBefore)).toEqual(listAfter);\n// }\n// const testRemoveCounter = () => {\n//     const listBefore = [0, 10, 20];\n//     const listAfter = [0, 20];\n//     deepFreeze(listBefore);\n//     expect(removeCounter(listBefore,1)).toEqual(listAfter);\n// }\n// const incrementCounter = (list, index) => {\n//     return [\n//         ...list.slice(0,index),\n//         list[index]+1,\n//         ...list.slice(index+1)\n//     ]\n// };\n// const testIncrementCounter = () => {\n//     const listBefore = [0, 10, 20];\n//     const listAfter = [0, 11, 20];\n//     deepFreeze(listBefore)\n//     expect(incrementCounter(listBefore,1).toEqual(listAfter));\n// }\n// testAddCounter();\n// testRemoveCounter();\n// console.log('All tests passed')\n// ############  TESTS ################# //\n\nvar testAddToDo = function testAddToDo() {\n  var stateBefore = [];\n  var stateAfter = [{\n    id: 0,\n    text: 'Learn Redux',\n    completed: false\n  }];\n  var action = {\n    type: 'ADD_TODO',\n    id: 0,\n    text: 'Learn Redux'\n  };\n  deepFreeze(stateBefore);\n  deepFreeze(action);\n  expect(todos(stateBefore, action)).toEqual(stateAfter);\n};\n\nvar testToggleTodo = function testToggleTodo() {\n  var stateBefore = [{\n    id: 0,\n    text: 'Blah',\n    completed: false\n  }];\n  var stateAfter = [{\n    id: 0,\n    text: 'Blah',\n    completed: true\n  }];\n  var action = {\n    type: 'TOGGLE_TODO',\n    id: 0\n  };\n  deepFreeze(stateBefore);\n  deepFreeze(action);\n  expect(todos(stateBefore, action)).toEqual(stateAfter);\n}; // ############ TO DO LIST ################## //\n\n\nvar todo = function todo(state, action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return {\n        id: action.id,\n        text: action.text,\n        completed: false\n      };\n\n    case 'TOGGLE_TODO':\n      if (state.id !== action.id) {\n        return state;\n      }\n\n      return _objectSpread({}, state, {\n        completed: !state.completed\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar todos = function todos() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'ADD_TODO':\n      return _toConsumableArray(state).concat([todo(undefined, action)]);\n\n    case 'TOGGLE_TODO':\n      return state.map(function (t) {\n        return todo(t, action);\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar visibilityFilter = function visibilityFilter() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'SHOW_ALL';\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SET_VISIIBILITY_FILTER':\n      return action.filter;\n\n    default:\n      return state;\n  }\n};\n\nvar todoApp = combineReducers({\n  todos: todos,\n  visibilityFilter: visibilityFilter\n}); // const todoApp = (state = {}, action) => {\n//     return {\n//         todos: todos(\n//             state.todos,\n//             action\n//         ),\n//         visibilityFilter: visibilityFilter(\n//             state.visibilityFilter,\n//             action\n//         )\n//     };\n// };\n\ntestAddToDo();\ntestToggleTodo();\nconsole.log('ALL TESTS PASSED');\nvar store = createStore(todoApp);\nconsole.log(store.getState());\nvar nextTodoId = 0;\n\nvar TodoApp =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TodoApp, _Component);\n\n  function TodoApp() {\n    _classCallCheck(this, TodoApp);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TodoApp).apply(this, arguments));\n  }\n\n  _createClass(TodoApp, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: function onClick() {\n          store.dispatch({\n            type: 'ADD_TODO',\n            text: 'Test',\n            id: nextTodoId++\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, this.props.todos.map(function (todo) {\n        return React.createElement(\"li\", {\n          key: todo.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 280\n          },\n          __self: this\n        }, todo.text);\n      })));\n    }\n  }]);\n\n  return TodoApp;\n}(Component);\n\nvar render = function render() {\n  ReactDOM.render(React.createElement(TodoApp, {\n    todos: store.getState().todos,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292\n    },\n    __self: this\n  }), document.getElementById('root'));\n};\n\nstore.subscribe(render);\nrender();","map":{"version":3,"sources":["/Users/sawamurap/redux-tutorial/src/index.js"],"names":["React","Component","ReactDOM","App","serviceWorker","expect","deepFreeze","createStore","combineReducers","testAddToDo","stateBefore","stateAfter","id","text","completed","action","type","todos","toEqual","testToggleTodo","todo","state","undefined","map","t","visibilityFilter","filter","todoApp","console","log","store","getState","nextTodoId","TodoApp","dispatch","props","render","document","getElementById","subscribe"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport expect from 'expect';\nimport deepFreeze from 'deep-freeze';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nimport { createStore, combineReducers } from 'redux';\n\n/// createStore from scratch        \n// const createStore = (reducer) => {\n//     let state;\n//     let listeners = [];\n\n//     const getState = () => state;\n//     const dispatch = (action) => {\n//         state = reducer(state, action);\n//         listeners.forEach(listener => listener());\n//     };\n//     const subscribe = (listener) => {\n//         listeners.push(listener)\n//         return () => {\n//             listeners = listeners.filter(l => l !== listener);\n//         };\n//     };\n\n//     dispatch({});\n\n//     return {getState, dispatch, subscribe};\n// };\n\n// function counter(state = 0, action) {\n//     switch (action.type){\n//         case 'INCREMENT':\n//             return state + 1;\n//         case 'DECREMENT':\n//             return state - 1;\n//         default:\n//             return state;\n//     }\n// }\n\n// /// Testing \n// // expect(\n// //     counter(0, {type: 'INCREMENT'})\n// // ).toEqual(1);\n\n// // expect(\n// //     counter(1, {type: 'INCREMENT'})\n// // ).toEqual(2);\n\n// // expect(\n// //     counter(2, {type: 'DECREMENT'})\n// // ).toEqual(1);\n\n// // expect(\n// //     counter(1, {type: 'DECREMENT'})\n// // ).toEqual(0);\n\n// // expect(\n// //     counter(1, {type: 'SOMETHING_ELSE'})\n// // ).toEqual(1);\n\n// // console.log('Tests passed!');\n\n\n// const store = createStore(counter);\n\n// const Counter = ({ \n//     value,\n//     onIncrement,\n//     onDecrement\n// }) => (\n//     <div>\n//         <h1>{value}</h1>\n//         <button onClick={onIncrement}>+</button>\n//         <button onClick={onDecrement}>-</button>\n//     </div>\n// );\n\n// const addCounter = (list) => {\n//     return [...list, 0];\n// }\n\n// const removeCounter = (list, index) => {\n//     return [...list.slice(0, index),\n//         ...list.slice(index + 1)\n//     ];\n// };\n\n\n// const testAddCounter = () => {\n//     const listBefore = [];\n//     const listAfter = [0];\n//     deepFreeze(listBefore);\n//     expect(addCounter(listBefore)).toEqual(listAfter);\n// }\n\n// const testRemoveCounter = () => {\n//     const listBefore = [0, 10, 20];\n//     const listAfter = [0, 20];\n//     deepFreeze(listBefore);\n//     expect(removeCounter(listBefore,1)).toEqual(listAfter);\n// }\n\n// const incrementCounter = (list, index) => {\n//     return [\n//         ...list.slice(0,index),\n//         list[index]+1,\n//         ...list.slice(index+1)\n//     ]\n// };\n\n// const testIncrementCounter = () => {\n//     const listBefore = [0, 10, 20];\n//     const listAfter = [0, 11, 20];\n//     deepFreeze(listBefore)\n//     expect(incrementCounter(listBefore,1).toEqual(listAfter));\n// }\n\n// testAddCounter();\n// testRemoveCounter();\n// console.log('All tests passed')\n\n// ############  TESTS ################# //\n\nconst testAddToDo = () => {\n    const stateBefore = [];\n    const stateAfter = [\n        {\n            id: 0,\n            text: 'Learn Redux',\n            completed: false\n        }\n    ];\n    const action = {\n        type: 'ADD_TODO',\n        id: 0,\n        text: 'Learn Redux'\n    };\n\n    deepFreeze(stateBefore);\n    deepFreeze(action);\n\n    expect(\n        todos(stateBefore, action)\n    ).toEqual(stateAfter);\n};\n\nconst testToggleTodo = () => {\n    const stateBefore = [\n        {\n            id: 0,\n            text: 'Blah',\n            completed: false\n        }\n    ];\n\n    const stateAfter = [\n        {\n            id: 0,\n            text: 'Blah',\n            completed: true\n        }\n    ];\n\n    const action = {\n        type: 'TOGGLE_TODO',\n        id: 0\n    };\n\n    deepFreeze(stateBefore);\n    deepFreeze(action);\n\n    expect(\n        todos(stateBefore, action)\n    ).toEqual(stateAfter);\n};\n\n// ############ TO DO LIST ################## //\n\nconst todo = (state, action) => {\n    switch (action.type) {  \n        case 'ADD_TODO':\n            return {\n                    id: action.id,\n                    text: action.text,\n                    completed: false\n            };\n            \n        case 'TOGGLE_TODO':\n            if (state.id !== action.id) {\n                return state;\n            }\n            return {\n                ...state,\n                completed: !state.completed\n            }\n        default:\n            return state;\n    }\n}\n\nconst todos = (state = [], action) => {\n    switch (action.type) {  \n        case 'ADD_TODO':\n            return [\n                ...state, \n                todo(undefined, action)\n            ];\n        case 'TOGGLE_TODO':\n            return state.map(t => todo(t, action));\n        default:\n            return state;\n    }\n};\n\nconst visibilityFilter = (\n    state = 'SHOW_ALL',\n    action\n) => {\n    switch (action.type) {\n        case 'SET_VISIIBILITY_FILTER':\n            return action.filter;\n        default:\n            return state;\n    }\n}\n\nconst todoApp = combineReducers({\n    todos,\n    visibilityFilter\n});\n\n// const todoApp = (state = {}, action) => {\n//     return {\n//         todos: todos(\n//             state.todos,\n//             action\n//         ),\n//         visibilityFilter: visibilityFilter(\n//             state.visibilityFilter,\n//             action\n//         )\n//     };\n// };\n\ntestAddToDo();  \ntestToggleTodo();\nconsole.log('ALL TESTS PASSED')\n\nconst store = createStore(todoApp);\n\nconsole.log(store.getState())\n\nlet nextTodoId = 0;\n\nclass TodoApp extends Component {\n    render() {\n        return (\n            <div>\n                <button onClick={() => {\n                    store.dispatch({\n                        type: 'ADD_TODO',\n                        text: 'Test',\n                        id: nextTodoId++\n                    });\n                }}>\n                </button>\n                <ul>\n                    {this.props.todos.map(todo => \n                        <li key={todo.id}>\n                            {todo.text}\n                        </li>\n                    )}\n                </ul>\n            </div>\n        );\n    }\n}\n\nconst render = () => {\n    ReactDOM.render(\n        <TodoApp \n            todos = {store.getState().todos}\n        />,\n        document.getElementById('root')\n    );\n};\n\nstore.subscribe(render);\nrender();\n"]},"metadata":{},"sourceType":"module"}