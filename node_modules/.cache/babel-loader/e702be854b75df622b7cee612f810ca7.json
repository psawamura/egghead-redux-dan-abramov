{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport expect from 'expect'; // ReactDOM.render(<App />, document.getElementById('root'));\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n// import { createStore } from 'redux';\n\nvar createStore = function createStore(reducer) {\n  var state;\n  var listeners = [];\n\n  var getState = function getState() {\n    return state;\n  };\n\n  var dispatch = function dispatch(action) {\n    state = reducer(state, action);\n    listeners.forEach(function (listener) {\n      return listener();\n    });\n  };\n\n  var subscribe = function subscribe(listener) {\n    listeners.push(listener);\n    return function () {\n      listeners = listeners.filter(function (l) {\n        return l !== listener;\n      });\n    };\n  };\n\n  dispatch({});\n  return {\n    getState: getState,\n    dispatch: dispatch,\n    subscribe: subscribe\n  };\n};\n\nfunction counter() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1;\n\n    case 'DECREMENT':\n      return state - 1;\n\n    default:\n      return state;\n  }\n} // expect(\n//     counter(0, {type: 'INCREMENT'})\n// ).toEqual(1);\n// expect(\n//     counter(1, {type: 'INCREMENT'})\n// ).toEqual(2);\n// expect(\n//     counter(2, {type: 'DECREMENT'})\n// ).toEqual(1);\n// expect(\n//     counter(1, {type: 'DECREMENT'})\n// ).toEqual(0);\n// expect(\n//     counter(1, {type: 'SOMETHING_ELSE'})\n// ).toEqual(1);\n// console.log('Tests passed!');\n\n\nvar store = createStore(counter);\n\nvar render = function render() {\n  document.body.innerText = store.getState();\n};\n\nstore.subscribe(render);\nrender();\ndocument.addEventListener('click', function () {\n  store.dispatch({\n    type: 'INCREMENT'\n  });\n});","map":{"version":3,"sources":["/Users/sawamurap/redux-tutorial/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","expect","createStore","reducer","state","listeners","getState","dispatch","action","forEach","listener","subscribe","push","filter","l","counter","type","store","render","document","body","innerText","addEventListener"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CAEA;AAEA;AACA;AACA;AACA;AAEA;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,OAAD,EAAa;AAC7B,MAAIC,KAAJ;AACA,MAAIC,SAAS,GAAG,EAAhB;;AAEA,MAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,WAAMF,KAAN;AAAA,GAAjB;;AACA,MAAMG,QAAQ,GAAG,SAAXA,QAAW,CAACC,MAAD,EAAY;AACzBJ,IAAAA,KAAK,GAAGD,OAAO,CAACC,KAAD,EAAQI,MAAR,CAAf;AACAH,IAAAA,SAAS,CAACI,OAAV,CAAkB,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,EAAZ;AAAA,KAA1B;AACH,GAHD;;AAIA,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAACD,QAAD,EAAc;AAC5BL,IAAAA,SAAS,CAACO,IAAV,CAAeF,QAAf;AACA,WAAO,YAAM;AACTL,MAAAA,SAAS,GAAGA,SAAS,CAACQ,MAAV,CAAiB,UAAAC,CAAC;AAAA,eAAIA,CAAC,KAAKJ,QAAV;AAAA,OAAlB,CAAZ;AACH,KAFD;AAGH,GALD;;AAOAH,EAAAA,QAAQ,CAAC,EAAD,CAAR;AAEA,SAAO;AAACD,IAAAA,QAAQ,EAARA,QAAD;AAAWC,IAAAA,QAAQ,EAARA,QAAX;AAAqBI,IAAAA,SAAS,EAATA;AAArB,GAAP;AACH,CAnBD;;AAwBA,SAASI,OAAT,GAAoC;AAAA,MAAnBX,KAAmB,uEAAX,CAAW;AAAA,MAARI,MAAQ;;AAChC,UAAQA,MAAM,CAACQ,IAAf;AACI,SAAK,WAAL;AACI,aAAOZ,KAAK,GAAG,CAAf;;AACJ,SAAK,WAAL;AACI,aAAOA,KAAK,GAAG,CAAf;;AACJ;AACI,aAAOA,KAAP;AANR;AAQH,C,CAED;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;AAGA,IAAMa,KAAK,GAAGf,WAAW,CAACa,OAAD,CAAzB;;AAEA,IAAMG,MAAM,GAAG,SAATA,MAAS,GAAM;AACjBC,EAAAA,QAAQ,CAACC,IAAT,CAAcC,SAAd,GAA0BJ,KAAK,CAACX,QAAN,EAA1B;AACH,CAFD;;AAIAW,KAAK,CAACN,SAAN,CAAgBO,MAAhB;AACAA,MAAM;AAENC,QAAQ,CAACG,gBAAT,CAA0B,OAA1B,EAAmC,YAAM;AACrCL,EAAAA,KAAK,CAACV,QAAN,CAAe;AAAES,IAAAA,IAAI,EAAE;AAAR,GAAf;AACH,CAFD","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport expect from 'expect';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n// import { createStore } from 'redux';\n\nconst createStore = (reducer) => {\n    let state;\n    let listeners = [];\n\n    const getState = () => state;\n    const dispatch = (action) => {\n        state = reducer(state, action);\n        listeners.forEach(listener => listener());\n    };\n    const subscribe = (listener) => {\n        listeners.push(listener)\n        return () => {\n            listeners = listeners.filter(l => l !== listener);\n        };\n    };\n\n    dispatch({});\n\n    return {getState, dispatch, subscribe};\n};\n\n\n\n\nfunction counter(state = 0, action) {\n    switch (action.type){\n        case 'INCREMENT':\n            return state + 1;\n        case 'DECREMENT':\n            return state - 1;\n        default:\n            return state;\n    }\n}\n\n// expect(\n//     counter(0, {type: 'INCREMENT'})\n// ).toEqual(1);\n\n// expect(\n//     counter(1, {type: 'INCREMENT'})\n// ).toEqual(2);\n\n// expect(\n//     counter(2, {type: 'DECREMENT'})\n// ).toEqual(1);\n\n// expect(\n//     counter(1, {type: 'DECREMENT'})\n// ).toEqual(0);\n\n// expect(\n//     counter(1, {type: 'SOMETHING_ELSE'})\n// ).toEqual(1);\n\n// console.log('Tests passed!');\n\n\nconst store = createStore(counter);\n\nconst render = () => {\n    document.body.innerText = store.getState();\n};\n\nstore.subscribe(render);\nrender();\n\ndocument.addEventListener('click', () => {\n    store.dispatch({ type: 'INCREMENT' });\n});"]},"metadata":{},"sourceType":"module"}